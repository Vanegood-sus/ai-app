import os
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.scrollview import ScrollView
from kivy.uix.image import Image as KivyImage
from kivy.core.window import Window
from kivy.uix.filechooser import FileChooserIconView
from kivy.uix.popup import Popup
from kivy.clock import Clock
import asyncio
from threading import Thread
import aiohttp
import json
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

Window.clearcolor = (0.1, 0.1, 0.1, 1)

class AIAssistantApp(App):
    API_URL = "https://text.pollinations.ai/openai"
    API_MODEL = "gpt-4o-mini"
    API_TIMEOUT = 60
    MAX_TOKENS_TEXT = 1000
    MAX_TOKENS_VISION = 1500
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.conversation_history = []
        
    def build(self):
        self.title = 'AI Assistant'
        
        main_layout = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        title_label = Label(
            text='ü§ñ AI Assistant —Å Pollinations.ai',
            size_hint=(1, 0.1),
            font_size='20sp',
            bold=True
        )
        main_layout.add_widget(title_label)
        
        self.chat_display = TextInput(
            text='–ü—Ä–∏–≤–µ—Ç! –Ø AI –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.\n\n',
            multiline=True,
            readonly=True,
            size_hint=(1, 0.5),
            background_color=(0.2, 0.2, 0.2, 1),
            foreground_color=(1, 1, 1, 1)
        )
        
        scroll = ScrollView(size_hint=(1, 0.5))
        scroll.add_widget(self.chat_display)
        main_layout.add_widget(scroll)
        
        buttons_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.1), spacing=5)
        
        ocr_btn = Button(text='üì∏ OCR', on_press=self.show_ocr_mode)
        analyze_btn = Button(text='üîç –ê–Ω–∞–ª–∏–∑', on_press=self.show_analyze_mode)
        solve_btn = Button(text='üìù –†–µ—à–∏—Ç—å', on_press=self.show_solve_mode)
        
        buttons_layout.add_widget(ocr_btn)
        buttons_layout.add_widget(analyze_btn)
        buttons_layout.add_widget(solve_btn)
        
        main_layout.add_widget(buttons_layout)
        
        input_layout = BoxLayout(orientation='horizontal', size_hint=(1, 0.15), spacing=5)
        
        self.user_input = TextInput(
            hint_text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
            multiline=False,
            size_hint=(0.7, 1),
            background_color=(0.2, 0.2, 0.2, 1),
            foreground_color=(1, 1, 1, 1)
        )
        self.user_input.bind(on_text_validate=self.send_message)
        
        send_btn = Button(
            text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
            size_hint=(0.3, 1),
            on_press=self.send_message
        )
        
        input_layout.add_widget(self.user_input)
        input_layout.add_widget(send_btn)
        
        main_layout.add_widget(input_layout)
        
        return main_layout
    
    def append_to_chat(self, message):
        self.chat_display.text += message + '\n\n'
        self.chat_display.cursor = (0, len(self.chat_display.text))
    
    def show_ocr_mode(self, instance):
        self.append_to_chat('üì∏ –†–µ–∂–∏–º OCR –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.')
        self.show_image_picker('ocr')
    
    def show_analyze_mode(self, instance):
        self.append_to_chat('üîç –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.')
        self.show_image_picker('analyze')
    
    def show_solve_mode(self, instance):
        self.append_to_chat('üìù –†–µ–∂–∏–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.')
        self.show_image_picker('solve')
    
    def show_image_picker(self, mode):
        content = BoxLayout(orientation='vertical')
        
        filechooser = FileChooserIconView(
            filters=['*.png', '*.jpg', '*.jpeg'],
            path=os.path.expanduser('~')
        )
        
        def select_image(instance):
            if filechooser.selection:
                image_path = filechooser.selection[0]
                popup.dismiss()
                Thread(target=lambda: asyncio.run(self.process_image(image_path, mode))).start()
        
        select_btn = Button(text='–í—ã–±—Ä–∞—Ç—å', size_hint=(1, 0.1), on_press=select_image)
        
        content.add_widget(filechooser)
        content.add_widget(select_btn)
        
        popup = Popup(title='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', content=content, size_hint=(0.9, 0.9))
        popup.open()
    
    async def process_image(self, image_path, mode):
        Clock.schedule_once(lambda dt: self.append_to_chat(f'‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'))
        
        try:
            with open(image_path, 'rb') as f:
                image_data = f.read()
            
            import base64
            base64_image = base64.b64encode(image_data).decode('utf-8')
            image_url = f"data:image/jpeg;base64,{base64_image}"
            
            if mode == 'ocr':
                prompt = "–†–∞—Å–ø–æ–∑–Ω–∞–π –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
            elif mode == 'analyze':
                prompt = "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ."
            elif mode == 'solve':
                prompt = "–†–µ—à–∏ –∑–∞–¥–∞—á—É —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ."
            else:
                prompt = "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
            
            result = await self.call_pollinations_vision(image_url, prompt)
            
            Clock.schedule_once(lambda dt: self.append_to_chat(f'ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{result}'))
            
        except Exception as e:
            logger.error(f"Error processing image: {e}")
            Clock.schedule_once(lambda dt: self.append_to_chat(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'))
    
    async def call_pollinations_vision(self, image_url, prompt):
        headers = {"Content-Type": "application/json"}
        
        payload = {
            "model": self.API_MODEL,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": image_url}}
                    ]
                }
            ],
            "max_tokens": self.MAX_TOKENS_VISION
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.API_URL, headers=headers, json=payload, timeout=self.API_TIMEOUT) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result and 'choices' in result and len(result['choices']) > 0:
                            return result['choices'][0]['message']['content']
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API"
        except Exception as e:
            logger.error(f"API error: {e}")
            return f"–û—à–∏–±–∫–∞ API: {str(e)}"
    
    def send_message(self, instance):
        user_text = self.user_input.text.strip()
        if not user_text:
            return
        
        self.append_to_chat(f'üë§ –í—ã: {user_text}')
        self.user_input.text = ''
        
        Thread(target=lambda: asyncio.run(self.get_ai_response(user_text))).start()
    
    async def get_ai_response(self, user_message):
        Clock.schedule_once(lambda dt: self.append_to_chat('‚è≥ AI –¥—É–º–∞–µ—Ç...'))
        
        try:
            self.conversation_history.append({"role": "user", "content": user_message})
            
            messages = [
                {"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}
            ] + self.conversation_history[-10:]
            
            headers = {"Content-Type": "application/json"}
            
            payload = {
                "model": self.API_MODEL,
                "messages": messages,
                "max_tokens": self.MAX_TOKENS_TEXT
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.API_URL, headers=headers, json=payload, timeout=self.API_TIMEOUT) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result and 'choices' in result and len(result['choices']) > 0:
                            ai_response = result['choices'][0]['message']['content']
                            self.conversation_history.append({"role": "assistant", "content": ai_response})
                            
                            Clock.schedule_once(lambda dt: self.append_to_chat(f'ü§ñ AI: {ai_response}'))
                        else:
                            Clock.schedule_once(lambda dt: self.append_to_chat('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç'))
                    else:
                        Clock.schedule_once(lambda dt: self.append_to_chat(f'‚ùå –û—à–∏–±–∫–∞ API: {response.status}'))
                        
        except Exception as e:
            logger.error(f"Error getting AI response: {e}")
            Clock.schedule_once(lambda dt: self.append_to_chat(f'‚ùå –û—à–∏–±–∫–∞: {str(e)}'))

if __name__ == '__main__':
    AIAssistantApp().run()
